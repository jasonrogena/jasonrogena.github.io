<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Localization on do{coffee; code;} while(true)</title><link>https://rogena.me/tags/localization/</link><description>Recent content in Localization on do{coffee; code;} while(true)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Jason Rogena</copyright><lastBuildDate>Mon, 13 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://rogena.me/tags/localization/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Localization on Android</title><link>https://rogena.me/posts/2014-10-13-simple-localization-on-android/</link><pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate><guid>https://rogena.me/posts/2014-10-13-simple-localization-on-android/</guid><description>Localizing apps to languages that are officially supported in Android is a bit straightforward. However, for unsupported languages, it might be a bit tricky especially if there are special characters involved.
I needed to translate my app to a bunch of local Kenyan languages. Adding support for these languages proved very easy (adding the translated strings to the strings.xml resource file). Mainly because all of these languages use the English alphabet.</description></item></channel></rss>